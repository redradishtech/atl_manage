#!/usr/bin/env python2.7

import os
import sys
from nagios_cli.cli import CLI
from nagios_cli.config import Config

def run():
    import optparse

    parser = optparse.OptionParser(usage='%prog [<options>] [<host> [<service>]]')
    
    group = optparse.OptionGroup(parser, 'Generic')
    group.add_option('-c', '--config', dest='config', metavar='filename',
        help='configuration file name')
    group.add_option('-e', '--execute', dest='execute', metavar='statement(s)',
        help='execute the given statement(s)')
    group.add_option('-w', '--write', dest='write', action='store_true', default=False,
        help='write default configuration to file and exit')
    parser.add_option_group(group)

    group = optparse.OptionGroup(parser, 'Logging')
    group.add_option('-q', '--quiet', dest='quiet', action='store_true', default=False,
        help='be quiet')
    group.add_option('-v', '--verbose', dest='verbose', action='store_true', default=False,
        help='be verbose')
    parser.add_option_group(group)
    
    group = optparse.OptionGroup(parser, 'User Interface')
    group.add_option('--no-color', dest='no_color', action='store_true', default=False,
        help='disable UI colors')
    parser.add_option_group(group)

    options, args = parser.parse_args()
    if len(args) > 2:
        parser.error('too many arguments')
        return 1

    if options.quiet and options.verbose:
        parser.error('quiet and verbose options are mutually exclusive')
        return 1

    if options.write:
        if not options.config:
            parser.error('missing configuration file name')
            return 1
        if os.path.exists(options.config):
            parser.error('not overwriting pre-existing configuration file')
            return 1
        else:
            from nagios_cli.config import DEFAULT_CONFIG
            fd = open(options.config, 'w')
            fd.write('# -*- coding: utf-8; -*-\n')
            fd.write(DEFAULT_CONFIG.encode('utf-8'))
            fd.write('\n')
            fd.close()
            print 'wrote configuration to', options.config
            return 0

    config = Config(options)
    config.load_default()

    if options.config:
        config.load(options.config)

    # Disable UI colors
    if options.no_color:
        config['ui.color'] = 0

    cli = CLI(config)
    for i, arg in enumerate(args):
        if i == 0:
            cli.dispatch('host %s' % (arg,))
        elif i == 1:
            cli.dispatch('service %s' % (arg,))

    if options.execute:
        for line in options.execute.split(';'):
            line = line.lstrip()
            if cli.dispatch(line):
                return 1
        return 0

    return cli.run()

if __name__ == '__main__':
    sys.exit(run())

