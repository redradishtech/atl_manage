define host{
        name                            atl-host
        use                             generic-host
	# For Atlassian apps, the 'host' check is the HTTP response time. If it goes too high, Nagios goes into a SOFT fail state for «max_check_attempts-1» tries, «retry_interval» × «interval_length» seconds apart, after which state goes HARD and further checks are not performed.
	# Default values are from  /etc/nagios3/conf.d/generic-host_nagios2.cfg
	# Two minutes of downtime (two check attempts) before we alert, up from the default of 10
        max_check_attempts              2
	# Do a host check every minute. The default is 5 minutes, in the belief that services are more important to check than hosts.
	check_interval                  1
	flap_detection_enabled          0       ; Disable flap detection, as it suppresses service recovery emails we want to see

        address                         127.0.0.1
        contact_groups                  critical-notificants   ; Only the 'host' going down is considered 'critical (warranting opsgenie alerts)
        register                        0       ; DONT REGISTER THIS DEFINITION - ITS NOT A REAL SERVICE, JUST A TEMPLATE!
        }

# Active service template - currently only used by 'Cert Valid' and JavaMelody's 'Mean HTTP response times' and 'Active threads' checks.
define service{
        name                            atl-service
        use                             generic-service
        host_name                       %{ATL_HOSTNAME}
        contact_groups                  noncritical-notificants ; Only the 'host' going down is considered 'critical' (warranting opsgenie alerts)
        notification_interval           60   ; Re-notify about service problems every hour
        flap_detection_enabled          0    ; Disable flap detection, as it suppresses service recovery emails we want to see
        max_check_attempts              3    ; Retry 3 times, on the third going to HARD status, sending email alerts and triggering a diagnostic snapshot
        check_interval                  10   ; Check the service every 10 minutes under normal conditions
        retry_interval                  1    ; Re-check the service every minute until a hard state can be determined
        register                        0    ; DONT REGISTER THIS DEFINITION - ITS NOT A REAL SERVICE, JUST A TEMPLATE!
        }

# Most of our services are passive - backup monitoring, config applied, LDAP checking - anything from a *.healthcheck script.
define service{
        name                            atl-passive-service
        use                             atl-service
        active_checks_enabled           0       ; Active service checks are DISabled
        passive_checks_enabled          1       ; Passive service checks are enabled/accepted
        check_freshness                 1
        freshness_threshold             60      ; assume 1 minute passive service interval (60s + 20s for delays, clock skew etc). EDIT - nagios seems buggy; checking once every 2 minutes. See /display/CLIENTS/Nagios+passive+check+interval+weirdness. So set to 60*2+20
        max_check_attempts              1	; Go straight to HARD status. Our passive services either fail hard or not at all
        check_command                   return-unknown ; command to actively check service when it goes stale
        register                        0       ; DONT REGISTER THIS DEFINITION - ITS NOT A REAL SERVICE, JUST A TEMPLATE!
}


# 'notify-host-by-email' command definition
define command{
	command_name	atl-notify-host-by-email
	command_line	/usr/bin/printf "%b" "\nNotification Type: $NOTIFICATIONTYPE$\nHost: $HOSTNAME$\nState: $HOSTSTATE$\nInfo: $HOSTOUTPUT$\nRole: $_HOSTATL_ROLE$\n\nDate/Time: $LONGDATETIME$\n" | /usr/bin/mail -r "$HOSTNAME$ %{ATL_ORGANIZATION} monitoring <nagios>" -s "%{ATL_ORGANIZATION} $HOSTNAME$ monitoring alert" $CONTACTEMAIL$
	}

# 'notify-service-by-email' command definition
define command{
	command_name	atl-notify-service-by-email
	# Note: This is customized to NOT include '$SERVICESTATE$' or '$NOTIFICATIONTYPE$' in the subject, as that breaks GMail's threading. We want the subject to be stable over PROBLEM and RECOVERY email types.
	# Hint: in gmail, create a filter on "To: ($CONTACTEMAIL) 'role: prod'", label the results and set a label colour
	command_line    /usr/bin/printf "%b" "\nNotification Type: $NOTIFICATIONTYPE$\n\nService: $SERVICEDESC$\nHost: $HOSTALIAS$\nState: $SERVICESTATE$\nRole: $_SERVICEATL_ROLE$\n\nDate/Time: $LONGDATETIME$\n\nAdditional Info:\n\n$SERVICEOUTPUT$\n" | /usr/bin/mail -r "$HOSTNAME$ %{ATL_ORGANIZATION} monitoring <nagios>" -s "$HOSTALIAS$/$SERVICEDESC$ %{ATL_ORGANIZATION} on $HOSTNAME$ monitoring alert" $CONTACTEMAIL$
	}

define service{
        service_description             System Load
        use                             atl-service
        check_command                   check_load!20.0!18.0!16.0!40.0!36.0!32.0
		_atl_role                       %{ATL_SERVER_ROLE}
}

define command {
        command_name    check_postfix_mailqueue
	# Note: Our postfix queue checker requires root, hence the 'sudo', which is permitted for our nagios user by the /etc/sudoers.d/atlassianservices-monitoring_postfix_mailqueue_checks snippet, installed by atl_install_monitoring
        command_line    sudo %{ATL_MANAGE}/monitoring/plugins/check_postfix_mailqueue -w %{ATL_MONITORING_MAILQUEUE_WARN} -c %{ATL_MONITORING_MAILQUEUE_CRITICAL} -b %{ATL_MONITORING_MAILQUEUE_BOUNCES} -d %{ATL_MONITORING_MAILQUEUE_DEFERRED}
}

define command {
        command_name    check_domain
		# Do not specify -w or -c here. For .au domains, the plugin seems to automatically handle crazy large negative values, when specify -c would cause this to fail:
		# OK - Domain 'easyjethro.com.au' will expire in -19811 days (serverRenewProhibited https://identitydigital.au/get-au/whois-status-codes#serverRenewProhibited).
        command_line    %{ATL_MANAGE}/monitoring/plugins/check_domain.php -d %{ATL_BASEDOMAIN}
}

define command {
        command_name    check_webserver_health
        command_line    %{ATL_MANAGE}/monitoring/plugins/check_webserver_health -H localhost -w %{ATL_MONITORING_WEBSERVER_FREESLOTS_WARNING} -c %{ATL_MONITORING_WEBSERVER_FREESLOTS_CRITICAL} 
}

define service{
        service_description             Postfix Queue
        use                             atl-service
        check_command                   check_postfix_mailqueue
		_atl_role                       %{ATL_SERVER_ROLE}
}

define command {
        command_name    check_postfix_messagesize
        command_line    %{ATL_MANAGE}/monitoring/plugins/check_postfix_messagesize
}

define service{
        service_description             Postfix messagesize
        use                             atl-service
        check_command                   check_postfix_messagesize
		_atl_role                       %{ATL_SERVER_ROLE}
}

define command {
        command_name    check_system_time
        command_line    %{ATL_MANAGE}/monitoring/plugins/check_time %{ATL_NTP_HOST} -w 20 -c 60
}

define service{
        service_description             Time Synced
        use                             atl-service
        check_command                   check_system_time
		_atl_role                       %{ATL_SERVER_ROLE}
}

define service{
        service_description             Webserver
        use                             atl-service
        check_command                   check_webserver_health
		_atl_role                       %{ATL_SERVER_ROLE}
		_atl_webserver                  %{ATL_WEBSERVER}
}

define service{
        service_description             Domain Expiry
        use                             atl-service
        check_command                   check_domain
}

# We check the database per-app, because we may want to check tables specific to certain apps

